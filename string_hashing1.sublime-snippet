<snippet>
	<content><![CDATA[
ll power(ll a,ll b,ll mod){
    a %= mod;
    ll ans = 1;
    while(b){
        if(b&1)
            ans= (ans * a)%mod;
        a= (a * a)%mod;
        b >>= 1;
    }
    return ans;
}

ll inv(ll b,ll mod){
    return (power(b%mod,mod-2,mod)%mod);
}

ll div(ll a,ll b,ll mod){
    return ((a%mod) * inv(b,mod))%mod ;
}

ll mul(ll a,ll b,ll mod){
    return ((a%mod) * (b%mod))%mod;
}

ll add(ll a,ll b,ll mod){
    return ((a%mod) + (b%mod))%mod;
}

ll sub(ll a,ll b,ll mod){
    return ((a%mod) - (b%mod) + mod)%mod;
}

const int MAXN = 1e6 + 5;
const ll M = 1000000009;
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());
const ll P = uniform_int_distribution<ll>(0, M - 1)(rng);
vl poww(MAXN);
vl inv_poww(MAXN);

void pre(){
    poww[0] = 1;
    for(ll i=1;i<MAXN;i++){
        poww[i] = mul(poww[i-1],P,M);
    }
    for(ll i=0;i<MAXN;i++){
        inv_poww[i] = inv(poww[i],M);
    }
}

struct StringHashing {
    ll n;
    string s;
    vl hash;

    StringHashing(string &s){
        this->s = s;
        n = sz(s);
        hash.resize(n);

        for(ll i=0;i<n;i++){
            hash[i] = mul((s[i]-'a'+1),poww[i],M);
            hash[i] = add(hash[i],(i-1>=0 ? hash[i-1] : 0ll),M);
        }
    }

    ll full_hash(){
        return hash[n-1];
    }

    ll substringHash(ll l,ll r){
        return mul(sub(hash[r],(l-1>=0 ? hash[l-1] : 0ll),M),inv_poww[l],M);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>string_hashing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
