<snippet>
	<content><![CDATA[
struct Node {
    int key;
    int value;
};

class MinHeap {
public:
    void insert(int key, int value);
    void deleteNode(int key);
    Node getMin();
    void deleteMin();
    bool isEmpty() const;

private:
    std::vector<Node> heap;
    std::map<int, int> keyIndexMap;

    void heapifyUp(int index);
    void heapifyDown(int index);
    void swapNodes(int index1, int index2);
};

void MinHeap::insert(int key, int value) {
    Node newNode = {key, value};
    heap.push_back(newNode);
    int index = heap.size() - 1;
    keyIndexMap[key] = index;
    heapifyUp(index);
}

void MinHeap::deleteNode(int key) {
    int index = keyIndexMap[key];
    swapNodes(index, heap.size() - 1);
    heap.pop_back();
    keyIndexMap.erase(key);
    if (index < heap.size()) {
        heapifyUp(index);
        heapifyDown(index);
    }
}

Node MinHeap::getMin() {
    return heap.front();
}

void MinHeap::deleteMin() {
    if (isEmpty()) return;
    deleteNode(heap.front().key);
}

bool MinHeap::isEmpty() const {
    return heap.empty();
}

void MinHeap::heapifyUp(int index) {
    while (index > 0) {
        int parentIndex = (index - 1) / 2;
        if (heap[index].value >= heap[parentIndex].value) break;
        swapNodes(index, parentIndex);
        index = parentIndex;
    }
}

void MinHeap::heapifyDown(int index) {
    int leftChild, rightChild, smallestChild;
    while (true) {
        leftChild = 2 * index + 1;
        rightChild = 2 * index + 2;
        smallestChild = index;

        if (leftChild < heap.size() && heap[leftChild].value < heap[smallestChild].value) {
            smallestChild = leftChild;
        }
        if (rightChild < heap.size() && heap[rightChild].value < heap[smallestChild].value) {
            smallestChild = rightChild;
        }
        if (smallestChild == index) break;
        swapNodes(index, smallestChild);
        index = smallestChild;
    }
}

void MinHeap::swapNodes(int index1, int index2) {
    std::swap(heap[index1], heap[index2]);
    keyIndexMap[heap[index1].key] = index1;
    keyIndexMap[heap[index2].key] = index2;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>minheap_map</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>